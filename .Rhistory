as_tibble() %>%
distinct(.keep_all = F)
df <- df %>%
as_tibble() %>%
distinct(.keep_all = T)
# Monthly Owner Costs
df_tract_homecosts <- temporalData5YearACS("B25088", geo = "county",
years = years,
states = st, geometry = F,
specificity = 2) %>%
as_tibble() %>%
filter(variable == "Estimate_Median selected monthly owner costs (dollars)_Total") %>%
select(c(GEOID, year, med_monthly_home_cost = estimate))
# Appends to main dataset and removes old object
df <- df %>%
left_join(df_tract_homecosts, by = c("GEOID", "year"))
rm(df_tract_homecosts)
# Once again, removes non-distinct values
df <- df %>%
as_tibble() %>%
distinct(.keep_all = T)
# Remove plyr so dplyr will be used
detach(package:plyr)
# Save
df %>%
arrange(year, GEOID) %>%
write.csv("data/processed/spatial/census.csv")
# Shapefile
df %>%
left_join(df_tract_geometry) %>%
distinct(.keep_all = T) %>%
# Transforms to NAD83 coordinates
st_transform(crs = 5070) %>%
rgdal::writeOGR(dsn = "tempdir", layer = "census", driver = "ESRI Shapefile")
df
require(plyr)
df_tract_homecosts <- temporalData5YearACS("B25088", geo = "county",
years = years,
states = st, geometry = F,
specificity = 2) %>%
as_tibble() %>%
filter(variable == "Estimate_Median selected monthly owner costs (dollars)_Total") %>%
select(c(GEOID, year, med_monthly_home_cost = estimate))
# Appends to main dataset and removes old object
df <- df %>%
left_join(df_tract_homecosts, by = c("GEOID", "year"))
#rm(df_tract_homecosts)
# Once again, removes non-distinct values
df <- df %>%
as_tibble() %>%
distinct(.keep_all = T)
# Remove plyr so dplyr will be used
detach(package:plyr)
# Save
df %>%
arrange(year, GEOID) %>%
write.csv("data/processed/spatial/census.csv")
# Shapefile
df %>%
left_join(df_tract_geometry) %>%
distinct(.keep_all = T) %>%
# Transforms to NAD83 coordinates
st_transform(crs = 5070) %>%
rgdal::writeOGR(dsn = "tempdir", layer = "census", driver = "ESRI Shapefile")
df
df_tract_homecosts
View(extract5YearACSData)
View(temporalData5YearACS)
View(temporalData5YearACS)
for (j in 1:length(c(NULL))){
print(j)
}
for (j in 1:length(c(NULL))-1){
print(j)
}
c(NULL)[0]
c(NULL)[1]
for (j in 1:length(c())){
print(j)
}
for (j in 1:1){
print(j)
}
length(c(NULL))
length(c(NULL, NULL))
vector(length = 1)
vector(NULL, length = 1)
for (j in 1:vector(length = 1)){
print(j)
}
for (j in 1:length(1)){
print(j)
}
for (j in 1:length(NULL)){
print(j)
}
for (j in 1:length(1)){
print(j)
}
for (j in 1:length(1)){
print(j)
}
df_tract_homecosts <- temporalData5YearACS("B25088", geo = "county",
years = years,
states = st, geometry = F,
specificity = 2) %>%
as_tibble() %>%
filter(variable == "Estimate_Median selected monthly owner costs (dollars)_Total") %>%
select(c(GEOID, year, med_monthly_home_cost = estimate))
require(plyr)
df_tract_homecosts <- temporalData5YearACS("B25088", geo = "county",
years = years,
states = st, geometry = F,
specificity = 2) %>%
as_tibble() %>%
filter(variable == "Estimate_Median selected monthly owner costs (dollars)_Total") %>%
select(c(GEOID, year, med_monthly_home_cost = estimate))
df_tract_homecosts
df_tract_homecosts %>%
arrange( GEOID, year)
source("scripts/wrangling/census_extraction_functions/ACSFunctionsPackage.R")
acsFunctionsPackage()
df_tract_homecosts <- temporalData5YearACS("B25088", geo = "county",
years = years,
states = st, geometry = F,
specificity = 2) %>%
as_tibble() %>%
filter(variable == "Estimate_Median selected monthly owner costs (dollars)_Total") %>%
select(c(GEOID, year, med_monthly_home_cost = estimate))
df_tract_homecosts %>%
arrange( GEOID, year)
df %>%
left_join(df_tract_geometry) %>%
distinct(.keep_all = T) %>%
st_as_sf() %>%
# Transforms to NAD83 coordinates
st_transform(crs = 5070) %>%
rgdal::writeOGR(dsn = "tempdir", layer = "census", driver = "ESRI Shapefile")
df %>%
left_join(df_tract_geometry) %>%
distinct(.keep_all = T) %>%
st_as_sf() %>%
# Transforms to NAD83 coordinates
st_transform(crs = 5070) %>%
rgdal::writeOGR(., dsn = "tempdir", layer = "census", driver = "ESRI Shapefile")
df_spatial <- df %>%
left_join(df_tract_geometry) %>%
distinct(.keep_all = T) %>%
st_as_sf() %>%
# Transforms to NAD83 coordinates
st_transform(crs = 5070)
df_spatial
st_write(df_spatial, dsn = "tempdir", layer = "census", driver = "ESRI Shapefile")
df
df_spatial
View(df_spatial)
df_tract_geometry
df_tract_geometry <- df_tract_geometry %>%
distinct(GEOID, .keep_all = T)
df_tract_geometry
df_spatial <- df %>%
left_join(df_tract_geometry) %>%
distinct(.keep_all = T) %>%
st_as_sf() %>%
# Transforms to NAD83 coordinates
st_transform(crs = 5070)
st_write(df_spatial, dsn = "tempdir", layer = "census", driver = "ESRI Shapefile")
st_write(df_spatial, dsn = "data/processed/spatial", layer = "census", driver = "ESRI Shapefile")
## Data and package imports
# package
library(tidyverse)
library(sf)
# data
df_census <-
read.csv("data/processed/census.csv") %>%
as_tibble() %>%
select(-c(X))
df_sf <-
rgdal::readOGR('data/processed/spatial/census/census.shp') %>%
st_as_sf() %>%
mutate(GEOID = as.integer(GEOID)) %>%
select(GEOID, geometry)
df_homelessness <-
read.csv("data/processed/hud_homelessness.csv") %>%
as_tibble()
# calculates CoC population
df_homelessness_cocPop <-
df_homelessness %>%
left_join(df_census %>%
select(c(GEOID, year, pop))) %>%
group_by(coc_number, year) %>%
summarize(coc_pop = sum(pop*pct_cnty_pop_coc, na.rm = T))
# weights homelessness counts by a county's population within a CoC
df_homelessness <-
df_homelessness %>%
left_join(df_census %>%
select(c(GEOID, year, pop))) %>%
left_join(df_homelessness_cocPop) %>%
mutate(exp_homelessness = ifelse(!is.na(pop),
coc_exp_homelessness*(pop*pct_cnty_pop_coc/coc_pop),
NA)) %>%
select(c(GEOID, year, exp_homelessness)) %>%
filter(!is.na(exp_homelessness))
df_transit <-
read.csv("data/processed/ipcd_transportation.csv") %>%
as_tibble() %>%
# Converts tract to county
mutate(GEOID = as.integer(substr(as.character(GEOID), 1,
nchar(as.character(GEOID))-6))) %>%
select(-c(X)) %>%
# Groups by county
group_by(GEOID) %>%
summarize(bike_2021 = sum(bike),
bus_2021 = sum(bus),
ferry_2021 = sum(ferry),
train_2021 = sum(train),
air_2021 = sum(air))
#df_schools <-
#  read.csv("data/processed/schools.csv") %>%
#  as_tibble() %>%
# Converts tract to county
#  mutate(GEOID = as.integer(substr(GEOID, 1, nchar(GEOID)-6))) %>%
#  group_by(GEOID, year) %>%
#  summarize(public_schools = sum(public_schools),
#            private_schools = sum(private_schools),
#            postsecondary_schools = sum(postsecondary_schools))
df_housing <-
read.csv("data/processed/building_permits_1990_2019.csv") %>%
as_tibble() %>%
select(-c(X)) %>%
arrange(GEOID, year)
# Note these are hospitals present in 2017
df_hospital <-
read.csv("data/processed/hospital_rating_location.csv") %>%
as_tibble() %>%
select(-c(X, county, state)) %>%
filter(!is.na(GEOID))
df_countyfips_crosswalk <-
read.csv("data/raw/crosswalks/county_fips.csv") %>%
as_tibble() %>%
select(GEOID = FIPS, name = Name, state = State)
## Pre-Merge Cleaning
## Merging
df <- df_housing %>%
left_join(df_countyfips_crosswalk) %>%
left_join(df_homelessness) %>%
left_join(df_transit) %>%
left_join(df_census) %>%
left_join(df_hospital) %>%
#left_join(df_sf) %>%
arrange(GEOID, year)
## Saving
# Non-Spatial
df %>%
write.csv("data/processed/master_dataset.csv")
df %>%
filter(GEOID %in% df_census$GEOID) %>%
write.csv("data/processed/DMV_dataset.csv")
# Spatial
df %>%
left_join(df_sf) %>%
st_as_sf() %>%
# Transforms to NAD83 coordinates
st_transform(crs = 5070) %>%
st_write(., dsn = "data/processed/spatial/master_dataset", layer = "master_dataset", driver = "ESRI Shapefile")
df %>%
filter(GEOID %in% df_census$GEOID) %>%
left_join(df_sf) %>%
st_as_sf() %>%
# Transforms to NAD83 coordinates
st_transform(crs = 5070) %>%
st_write(., dsn = "data/processed/spatial/DMV_dataset", layer = "DMV_dataset", driver = "ESRI Shapefile")
library(censusapi)
library(tidyverse)
# Used to extract tract data from GEOIDs
require(stringi)
# Imports the tidycensus package, which is a simpler way of working with census data
library(tidycensus)
census_api_key("Your Key Here")
library(sf)
# Import self-made functions
source("scripts/wrangling/census_extraction_functions/ACSFunctionsPackage.R")
acsFunctionsPackage()
## Census Data Extractor
# Included so rbind.fill will work
require(plyr)
st <- c("11", "24", "51")
# Sets the years
years <- seq(2009, 2019)
temporalData5YearACS("B27001", geo = "county",
years = 2012, #:2019
states = 11, geometry = F,
specificity = 4) %>%
as_tibble() %>%
filter(grepl("With health insurance coverage", variable))
# Add Census key
Sys.setenv(CENSUS_KEY="2f018b883dd35f1fd0f30cdf8b1a8663cff19bdb")
census_api_key("2f018b883dd35f1fd0f30cdf8b1a8663cff19bdb")
census_api_key("2f018b883dd35f1fd0f30cdf8b1a8663cff19bdb", install = T)
census_api_key("2f018b883dd35f1fd0f30cdf8b1a8663cff19bdb", install = T, overwrite = T)
census_api_key(Sys.getenv("CENSUS_API_KEY"))
temporalData5YearACS("B27001", geo = "county",
years = 2012, #:2019
states = 11, geometry = F,
specificity = 4) %>%
as_tibble() %>%
filter(grepl("With health insurance coverage", variable))
temporalData5YearACS("B27001", geo = "county",
years = 2012, #:2019
states = 11, geometry = F,
specificity = 4) %>%
as_tibble()
test <- temporalData5YearACS("B27001", geo = "county",
years = 2012, #:2019
states = 11, geometry = F,
specificity = 4) %>%
as_tibble()
test
as_tibble() %>%
filter(grepl("With health insurance coverage", variable))
test %>%
as_tibble() %>%
filter(grepl("With health insurance coverage", variable))
# Health Insurance Coverage
df_tract_ohealthcov <- temporalData5YearACS("B27001", geo = "county",
years = 2012:2019,
states = st, geometry = F,
specificity = 4) %>%
test %>%
as_tibble() %>%
filter(grepl("With health insurance coverage", variable)) %>%
arrange(GEOID, year)
test %>%
as_tibble() %>%
filter(grepl("With health insurance coverage", variable)) %>%
arrange(GEOID, year)
test %>%
as_tibble() %>%
filter(grepl("With health insurance coverage", variable)) %>%
group_by(GEOID, year) %>%
dplyr::summarize(healthcare_coverage = sum(estimate)/mean(summary_est, na.rm = T))
test <- temporalData5YearACS("B27001", geo = "county",
years = 2012,
states = st, geometry = F,
specificity = 4)
test %>%
as_tibble() %>%
filter(grepl("With health insurance coverage", variable)) %>%
group_by(GEOID, year) %>%
dplyr::summarize(healthcare_coverage = sum(estimate)/mean(summary_est, na.rm = T))
test %>%
as_tibble() %>%
filter(grepl("With health insurance coverage", variable)) %>%
group_by(GEOID, year) %>%
dplyr::summarize(healthcare_coverage = sum(estimate)/mean(summary_est, na.rm = T))
test <- temporalData5YearACS("B27001", geo = "county",
years = 2012:2013,
states = st, geometry = F,
specificity = 4)
test %>%
as_tibble() %>%
filter(grepl("With health insurance coverage", variable)) %>%
group_by(GEOID, year) %>%
dplyr::summarize(healthcare_coverage = sum(estimate)/mean(summary_est, na.rm = T))
test %>%
as_tibble()
View(test)
View(extract5YearACSData)
1:length(c(NULL))
length(c(NULL)):length(c(NULL))
length(c(NULL)):length(c(NULL))+1
length(c(NULL))-length(c(NULL)):length(c(NULL))+1
length(c(NULL))-length(c(NULL)):length(c(NULL))
c(NULL)[0]
c(NULL)[1]
length(c(NULL))-length(c(NULL)):length(c(NULL))
length(c(NULL))-length(c(NULL))+1:length(c(NULL))+1
length(c(NULL))-length(c(NULL))
length(c(NULL))-length(c(NULL))+1
length(c(NULL))
length(c(NULL))-length(c(NULL))+1:length(c(NULL))+1
length(c(NULL))-length(c(NULL))+1:length(c(NULL))+1
length(c(NULL))-length(c(NULL))+1
length(c(NULL))+1
1:1
(length(c(NULL))-length(c(NULL))+1):length(c(NULL))+1
(length(c(NULL))-length(c(NULL))+1):(length(c(NULL))+1)
(length(c(st))-length(c(st))+1):(length(c(st))+1)
(length(c(NULL))-length(c(NULL))+1):(length(c(NULL))+1)
(length(c(st))-length(c(st))+1):(length(c(st))+1)
st[4]
(length(c(NULL))-length(c(NULL))):(length(c(NULL)))
(length(c(st))-length(c(st))):(length(c(st)))
(length(c(NULL))-length(c(NULL))+1):(length(c(NULL)))
(length(c(st))-length(c(st))+1):(length(c(st)))
1:length(NULL)
1:length(NULL)+1
1:length(NULL)+2
1:(length(NULL)+1)
vector(length = 1)
c()
1:length(c())
1:length(st)
1:length(c())
seq(1:length(c()))
seq(length(c()))
seq(length(st)
seq(length(st))
seq(length(st))
seq(length(c()))
seq(length(c(NULL)))
length(c(NULL))
View(temporalData5YearACS)
source("scripts/wrangling/census_extraction_functions/ACSFunctionsPackage.R")
acsFunctionsPackage()
test <- temporalData5YearACS("B27001", geo = "county",
years = 2012,
states = st, geometry = F,
specificity = 4) #%>%
test %>%
as_tibble() %>%
filter(grepl("With health insurance coverage", variable)) %>%
group_by(GEOID, year) %>%
dplyr::summarize(healthcare_coverage = sum(estimate)/mean(summary_est, na.rm = T))
library(tidyverse)
# Data
# Initializes dataframe
df <- data.frame()
# Public Schools
for (i in 2015:2019){
df <- df %>%
rbind(
read.csv(paste0("data/raw/school_locations/public_school_locations_", as.character(i), ".csv")) %>%
select(c(lat = colnames(.)[grepl("LAT",colnames(.))], lon = colnames(.)[grepl("LON",colnames(.))])) %>%
mutate(year = i,
school_type = "public")
)
}
# Private Schools
for (i in c(2015, 2017)){
df <- df %>%
rbind(
read.csv(paste0("data/raw/school_locations/private_school_locations_", as.character(i), ".csv")) %>%
select(c(lat = colnames(.)[grepl("LAT",colnames(.))], lon = colnames(.)[grepl("LON",colnames(.))])) %>%
mutate(year = i,
school_type = "private")
)
}
# Postsecondary Schools
for (i in 2015:2019){
df <- df %>%
rbind(
read.csv(paste0("data/raw/school_locations/postsecondary_school_locations_", as.character(i), ".csv")) %>%
select(c(lat = colnames(.)[grepl("LAT",colnames(.))], lon = colnames(.)[grepl("LON",colnames(.))])) %>%
mutate(year = i,
school_type = "postsecondary")
)
}
substr(latlong2fips(df$lat[100498], df$lon[100498]), 1, 11)
latlong2fips <- function(latitude, longitude) {
url <- "https://geo.fcc.gov/api/census/block/find?format=json&latitude=%f&longitude=%f"
url <- sprintf(url, latitude, longitude)
# Extracts the URL as a json file
json <- curl::curl(url)
# Sets up to close the URL connection once the function finishes
on.exit(close(json))
# Reads the lines
lines <- readLines(json)
# Converts the lines to readable results
result <- rjson::fromJSON(lines)
# Returns the county fips
return(result$Block$FIPS)
}
substr(latlong2fips(df$lat[100498], df$lon[100498]), 1, 11)
substr(latlong2fips(df$lat[100497], df$lon[100497]), 1, 11)
df[100498]
df[100498,]
# Trims latitudes and longitudes outside of a desired range
# Current Bounds: Approximately the DC, Maryland, and Virginia
df %>%
filter(lat >= 35 &
lat <= 40 &
lon >= 72 &
lon <= 87)
df
df %>%
filter(lat >= 35 &
lat <= 40 &
lon >= -87 &
lon <= -72)
# Trims latitudes and longitudes outside of a desired range
# Current Bounds: Approximately the DC, Maryland, and Virginia
df <- df %>%
filter(lat >= 35 &
lat <= 40 &
lon >= -87 &
lon <= -72)
for (i in 1:nrow(df)){
## Check "Replacement has length zero" issue
tract_fips[i] <- substr(latlong2fips(df$lat[i], df$lon[i]), 1, 11)
if (i/500-as.integer(i/500) == 0){
print(round(i/nrow(df)*100,2))
}
}
tract_fips <- vector(length = nrow(df))
for (i in 1:nrow(df)){
## Check "Replacement has length zero" issue
tract_fips[i] <- substr(latlong2fips(df$lat[i], df$lon[i]), 1, 11)
if (i/500-as.integer(i/500) == 0){
print(round(i/nrow(df)*100,2))
}
}
